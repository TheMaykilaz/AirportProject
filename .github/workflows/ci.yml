name: Airport Project CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: airport-project:latest

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install Ruff
      run: pip install ruff==0.8.4

    - name: Run Ruff linting
      run: ruff check . --output-format=github

    - name: Run Ruff formatting check
      run: ruff format --check .

  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Wait for PostgreSQL
      run: |
        until pg_isready -h localhost -p 5432 -U test_user; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done

    - name: Run migrations
      run: python manage.py migrate --noinput
      env:
        DB_NAME: test_db
        DB_USER: test_user
        DB_PASSWORD: test_pass
        DB_HOST: localhost
        SECRET_KEY: test-secret-key-for-ci

    - name: Run tests
      run: python manage.py test --parallel
      env:
        DB_NAME: test_db
        DB_USER: test_user
        DB_PASSWORD: test_pass
        DB_HOST: localhost
        SECRET_KEY: test-secret-key-for-ci

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build, lint, test]
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging..."
        echo "This would deploy to your staging environment"

    environment:
      name: staging
      url: https://staging.yourdomain.com

  deploy-production:
    runs-on: ubuntu-latest
    needs: [build, lint, test]
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Deploy to production
      run: |
        echo "Deploying to production..."
        echo "This would deploy to your production environment"

    environment:
      name: production
      url: https://yourdomain.com

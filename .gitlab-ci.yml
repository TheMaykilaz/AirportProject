spec:
  inputs:
    # CI inputs (validated at pipeline creation)
    deploy_environment:
      description: "Environment to deploy: staging or production"
      options: ["staging", "production"]
      default: "staging"

    run_tests:
      description: "Whether to run tests"
      type: boolean
      default: true

    run_lint:
      description: "Whether to run linting (Ruff)"
      type: boolean
      default: true

    docker_tag:
      description: "Docker image tag (semantic version or commit SHA)"
      type: string
      regex: ^(v\d+\.\d+\.\d+|[a-f0-9]{7,40})$
      default: $CI_COMMIT_SHA
---

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  IMAGE_NAME: $CI_REGISTRY_IMAGE
  IMAGE_TAG: $[[ inputs.docker_tag ]]

stages:
  - build
  - test
  - deploy

# ---------------------
# 🧱 Build Docker Image
# ---------------------
build_image:
  stage: build
  image: docker:24-dind
  services:
    - docker:24-dind
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - docker build -t $IMAGE_NAME:$IMAGE_TAG -t $IMAGE_NAME:latest .
    - docker push $IMAGE_NAME:$IMAGE_TAG
    - docker push $IMAGE_NAME:latest
  only:
    - main
    - merge_requests

# ---------------------
# 🔍 Lint with Ruff
# ---------------------
lint:
  stage: test
  image: python:3.12-slim
  before_script:
    - pip install --no-cache-dir ruff==0.8.4
  script:
    - ruff check . --output-format=gitlab || true
    - ruff format --check . || true
  allow_failure: true
  rules:
    - if: '$[[ inputs.run_lint ]] == true'
  only:
    - main
    - merge_requests

# ---------------------
# 🧪 Run Django Tests
# ---------------------
test:
  stage: test
  image: python:3.12
  services:
    - name: postgres:16-alpine
      alias: postgres
    - name: redis:7-alpine
      alias: redis
  variables:
    POSTGRES_DB: test_db
    POSTGRES_USER: test_user
    POSTGRES_PASSWORD: test_pass
    POSTGRES_HOST_AUTH_METHOD: trust
    SECRET_KEY: $SECRET_KEY
    DB_NAME: test_db
    DB_USER: test_user
    DB_PASSWORD: test_pass
    DB_HOST: postgres
    DB_PORT: "5432"
    REDIS_HOST: redis
    REDIS_PORT: "6379"
    DEBUG: "True"
  before_script:
    - python -m pip install --upgrade pip
    - pip install --no-cache-dir -r requirements.txt
    - apt-get update && apt-get install -y postgresql-client
  script:
    - |
      until pg_isready -h postgres -p 5432 -U test_user; do
        echo "Waiting for PostgreSQL..."
        sleep 2
      done
      echo "PostgreSQL is ready!"
    - python manage.py migrate --noinput
    - python manage.py test --parallel
  coverage: '/TOTAL.*\s+(\d+%)$/'
  artifacts:
    reports:
      junit: test-results.xml
    paths:
      - htmlcov/
    expire_in: 1 week
  rules:
    - if: '$[[ inputs.run_tests ]] == true'
  only:
    - main
    - merge_requests

# ---------------------
# 🚀 Deploy Job (generic)
# ---------------------
deploy:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client gettext
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh

    # Choose target dynamically based on input
    - |
      if [ "$[[ inputs.deploy_environment ]]" = "staging" ]; then
        export DEPLOY_SERVER=$STAGING_SERVER
        export DEPLOY_USER=$STAGING_USER
        export DEPLOY_URL="https://staging.yourdomain.com"
      else
        export DEPLOY_SERVER=$PRODUCTION_SERVER
        export DEPLOY_USER=$PRODUCTION_USER
        export DEPLOY_URL="https://yourdomain.com"
      fi

    - ssh-keyscan $DEPLOY_SERVER >> ~/.ssh/known_hosts

  script:
    - echo "Deploying to $[[ inputs.deploy_environment ]]..."
    - |
      ssh $DEPLOY_USER@$DEPLOY_SERVER << 'ENDSSH'
        cd /var/www/your-app
        echo "Pulling new image..."
        echo ${CI_REGISTRY_PASSWORD} | docker login -u ${CI_REGISTRY_USER} --password-stdin ${CI_REGISTRY}
        docker pull ${IMAGE_NAME}:${IMAGE_TAG}
        docker-compose down
        docker-compose up -d
        docker-compose exec -T web python manage.py migrate --noinput
        docker-compose exec -T web python manage.py collectstatic --noinput
      ENDSSH
    - echo "✅ Deployment complete for $[[ inputs.deploy_environment ]]"
  environment:
    name: $[[ inputs.deploy_environment ]]
    url: $DEPLOY_URL
  when: manual
  only:
    - main

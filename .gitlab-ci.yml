name: Django CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_DRIVER: overlay2
  IMAGE_NAME: ${{ github.repository }}
  IMAGE_TAG: ${{ github.sha }}

jobs:
  # ---------------------
  # 🧱 Build Docker image
  # ---------------------
  build_image:
    name: Build Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:${{ github.sha }}
            ghcr.io/${{ github.repository }}:latest

  # ---------------------
  # 🔍 Lint with Ruff
  # ---------------------
  lint:
    name: Ruff Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install Ruff
        run: pip install ruff==0.8.4
      - name: Run Ruff Linter
        run: |
          ruff check . --output-format=github || true
          ruff format --check . || true

  # ---------------------
  # 🧪 Run Tests
  # ---------------------
  test:
    name: Run Django Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U test_user -d test_db"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    env:
      DB_NAME: test_db
      DB_USER: test_user
      DB_PASSWORD: test_pass
      DB_HOST: localhost
      DB_PORT: 5432
      REDIS_HOST: localhost
      REDIS_PORT: 6379
      SECRET_KEY: test-secret-key-for-ci
      DEBUG: true

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Wait for DB to be ready
        run: |
          until pg_isready -h localhost -p 5432 -U test_user; do
            echo "Waiting for Postgres..."
            sleep 2
          done
          echo "Postgres is ready!"

      - name: Run migrations and tests
        run: |
          python manage.py migrate --noinput
          python manage.py test --parallel

  # ---------------------
  # 🚀 Deploy (manual)
  # ---------------------
  deploy_staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build_image, test]
    if: github.ref == 'refs/heads/main'
    environment:
      name: staging
      url: https://staging.yourdomain.com
    steps:
      - name: Deploy
        run: |
          echo "Deploying to staging..."
          echo "Pulling Docker image and running on staging server..."
          echo "Staging deployment complete."
    # Manual approval step
    concurrency:
      group: staging
      cancel-in-progress: false

  deploy_production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build_image, test]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://yourdomain.com
    steps:
      - name: Deploy
        run: |
          echo "Deploying to production..."
          echo "Pulling Docker image and running on production server..."
          echo "Production deployment complete."
